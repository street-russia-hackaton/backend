# Generated by Django 5.0.6 on 2024-05-21 13:27

import core.constants
import datetime
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('data', '0001_initial'),
        ('info', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Events',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_title', models.CharField(max_length=core.constants.FieldLength['MAX_LENGTH_TITLE'], verbose_name='Название мероприятия')),
                ('event_image', models.ImageField(upload_to='images/events/', verbose_name='Изображение мероприятия')),
                ('event_start_date', models.DateTimeField(default=datetime.datetime.now, verbose_name='Дата начала мероприятия')),
                ('event_end_date', models.DateTimeField(default=datetime.datetime.now, verbose_name='Дата окончания мероприятия')),
                ('event_information', models.TextField(verbose_name='Информация о мероприятии')),
                ('event_qr_code', models.ImageField(blank=True, null=True, upload_to='images/events/qr_codes/', verbose_name='QR-код')),
                ('event_ics_file', models.FileField(blank=True, null=True, upload_to='images/events/ics_files/', verbose_name='Файл календаря')),
                ('event_is_pets', models.BooleanField(default=False, verbose_name='Можно с животными')),
                ('event_is_food', models.BooleanField(default=False, verbose_name='Можно ли со своей едой')),
                ('event_is_wc', models.BooleanField(default=False, verbose_name='Есть ли туалет')),
                ('event_is_disabled', models.BooleanField(default=False, verbose_name='Для людей с\xa0ограниченными возможностями')),
                ('event_city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events_city', to='data.cities', verbose_name='Город')),
                ('event_curator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events_curator', to=settings.AUTH_USER_MODEL, verbose_name='Организатор мероприятия')),
                ('event_disciplines', models.ManyToManyField(to='info.disciplines', verbose_name='Дисциплины')),
                ('event_partner', models.ManyToManyField(to='info.partners', verbose_name='Партнеры мероприятия')),
                ('event_regional_division', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events_regional_division', to='info.regionaldivisions', verbose_name='Региональное отделение')),
            ],
            options={
                'verbose_name': 'Мероприятие',
                'verbose_name_plural': 'Мероприятия',
            },
        ),
        migrations.CreateModel(
            name='FavoriteEvents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_favorite', to='events.events', verbose_name='мероприятие')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants_favorite', to=settings.AUTH_USER_MODEL, verbose_name='участник')),
            ],
            options={
                'verbose_name': 'Избранное мероприятие',
                'verbose_name_plural': 'Избранные мероприятия',
            },
        ),
        migrations.CreateModel(
            name='RegisteredEvents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_registered', to='events.events', verbose_name='Мероприятие')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participant_registered', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Регистрация',
                'verbose_name_plural': 'Регистрации',
            },
        ),
        migrations.AddConstraint(
            model_name='favoriteevents',
            constraint=models.UniqueConstraint(fields=('user', 'event'), name='user_event'),
        ),
        migrations.AddConstraint(
            model_name='registeredevents',
            constraint=models.UniqueConstraint(fields=('event', 'user'), name='event_user'),
        ),
    ]
